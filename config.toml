################################################################################
# Config
################################################################################
theme = "my_theme_dark"

[editor]
auto-format = false
auto-save = true
bufferline = "always"
color-modes = true
cursorline = true
line-number = "relative"
mouse = false
rulers = [80, 120]
# shell = [
#   "pwsh.exe",
#   "-NoLogo",
#   "-NoProfileLoadTime",
#   "-Command",
#   "$PSStyle.OutputRendering='PlainText';",
# ]
# shell = ["nu", "-c"]
shell = ["fish", "-c"]
true-color = true
undercurl = true

[editor.lsp]
display-messages = true
display-inlay-hints = true

[editor.statusline]
left = [
  "mode",
  "spinner",
  # "separator", 
  "version-control",
  "spacer",
  "separator",           # <-
  "read-only-indicator",
  # "file-type-icon",
  "file-name",
  "file-modification-indicator",
  "register",
]
center = []
right = [
  "diagnostics",
  "workspace-diagnostics",
  "separator",                # <-
  "selections",
  "primary-selection-length",
  "separator",                # <-
  "position",
  "position-percentage",
  "spacer",                   # <-[]
  "separator",                # <-
  "file-encoding",
  "file-line-ending",
  "file-type",
]
separator = "│"

[editor.cursor-shape]
insert = "bar"
normal = "block"
select = "underline"

[editor.file-picker]
hidden = true
git-ignore = true

[editor.whitespace.render]
space = "all"
nbsp = "all"
tab = "all"
newline = "all"

[editor.whitespace.characters]
space = "·"
nbsp = "⍽"
# tab = "→"
# newline = "⏎"
tabpad = "·"  # Tabs will look like "→···" (depending on tab width)
newline = "↴"
tab = "⇥"

[editor.indent-guides]
render = true
character = "╎" # Some characters that work well: "▏", "┆", "┊", "⸽"
skip-levels = 1

[editor.soft-wrap]
enable = true

################################################################################
# Key mapping
################################################################################
[keys.insert]
#-------------------------------------------------------------------------------
# Maps `jj` to exit insert mode as vim
# j = { j = ["normal_mode", "move_char_left"] } 
# j = { j = "normal_mode", k = "normal_mode" }
# j = { j = [":pipe-to im-select 1033", "normal_mode"], k = [":pipe-to im-select 1033", "normal_mode"] }
# esc = [":pipe-to im-select 1033", "normal_mode"]
esc = ["normal_mode"]
# "C-[" = [":pipe-to im-select 1033", "normal_mode"]
"C-[" = ["normal_mode"]

#-------------------------------------------------------------------------------
# shell shortcut 
C-a = "goto_first_nonwhitespace"
C-e = "goto_line_end_newline"
C-f = "move_char_right"
C-b = "move_char_left"

# A-f = ["move_next_word_end"]   # BUG
# A-b = ["move_prev_word_start"] # BUG

# Origin: C-u, C-k, C-h, C-d, C-w, A-d
# C-h/C-w, C-d/A-d

#-------------------------------------------------------------------------------
# append ; for rust/c/cpp/...
# BUG: when use more than once (but in fact, almost always use once)
"C-;" = [
  "save_selection",
  "insert_at_line_end",
  ":insert-output busybox echo -n ';'",
  # "delete_char_forward",
  "jump_backward",
]

# " " = ["collapse_selection", ":insert-output printf ' '", "move_char_right"]

[keys.normal]
#-------------------------------------------------------------------------------
# basic
C-m = "save_selection"
C-q = ":q"
C-s = ":fmt"
C-r = ":reload"

# esc = [":pipe-to im-select 1033", "normal_mode"]
esc = ["normal_mode"]

#-------------------------------------------------------------------------------
# append ; for rust/c/cpp/...
"C-;" = [
  "save_selection",
  "goto_line_end",
  ":append-output busybox echo -n ';'",
  # "delete_char_forward",
  "jump_backward",
]

# `A-.`: Repeat last motion (f, t or m)
# `.`: Repeat last insert
# d = ["change_selection", "normal_mode"]

ret = ["move_line_down", "goto_first_nonwhitespace"]
# Use this binding too often, will forget to use Alt+Comma to remove primary
# selection. 
# Practice Comma and Semicolon to get skilled in complexed selection mode.
# esc = ["collapse_selection", "keep_primary_selection"]

# A-up = [
#   "keep_primary_selection",
#   "extend_line",
#   "yank",
#   "move_line_up",
#   "open_above",
#   "normal_mode",
#   "replace_with_yanked",
#   "move_line_down",
#   "move_line_down",
#   "extend_line",
#   "delete_selection",
#   "move_line_up",
#   "move_line_up",
# ]
# A-down = [
#   "keep_primary_selection",
#   "extend_line",
#   "delete_selection",
#   "paste_after",
#   "move_line_down",
# ]

# F5 = ""

# Better extend line, Shift Key to cancel
x = "extend_line_below"
A-x = "extend_line_above"
A-X = ["extend_line_down", "extend_to_line_bounds"]
X = ["extend_line_up", "extend_to_line_bounds"]

[keys.select]
#-------------------------------------------------------------------------------
# basic
C-m = "save_selection"
C-q = ":q"
C-s = ":fmt"
C-r = ":reload"

# esc = [":pipe-to im-select 1033", "normal_mode"]
esc = ["normal_mode"]

#-------------------------------------------------------------------------------
x = "extend_line_below"
A-x = "extend_line_above"
A-X = ["extend_line_down", "extend_to_line_bounds"]
X = ["extend_line_up", "extend_to_line_bounds"]


[keys.normal."space"] # terminal
"`" = ":sh wezterm cli split-pane"

[keys.normal."C-w"]
c = ":bc"
C = ":bca"
O = ":bco"

[keys.normal."space".w]
c = ":bc"
C = ":bca"
O = ":bco"

[keys.normal."space".c] # conifg
# config
o = ":config-open"
# @os windows
# l = ":o ~/AppData/Roaming/helix/languages.toml"
# t = ":o ~/AppData/Roaming/helix/themes/my_theme_dark.toml"
# T = ":o ~/AppData/Roaming/helix/themes/my_theme_light.toml"
# @os unix
l = ":o ~/.config/helix/languages.toml"
t = ":o ~/.config/helix/themes/my_theme_dark.toml"
T = ":o ~/.config/helix/themes/my_theme_light.toml"
r = ":config-reload"

[keys.normal."space"."space"] # reload files, setting
"space" = ":reload-all"

c = ":toggle search.smart-case"                                                                                            # case (search)
i = ":toggle lsp.display-inlay-hints"                                                                                      # inlay
m = ":toggle mouse"                                                                                                        # mouse
s = ":toggle whitespace.render.space none all"                                                                             # space
ret = ":toggle whitespace.render.newline none all"                                                                         # newline
tab = ":toggle whitespace.render.tab none all"                                                                             # tab
r = ":set whitespace.render {\"default\":null,\"nbsp\":\"all\",\"newline\":\"all\",\"space\":\"all\",\"tab\":\"all\"}"
R = ":set whitespace.render {\"default\":null,\"nbsp\":\"none\",\"newline\":\"none\",\"space\":\"none\",\"tab\":\"none\"}"
f = ":toggle auto-format"                                                                                                  # format
# cursor
l = ":toggle cursorline"
L = ":toggle cursorcolumn"

[keys.normal."space".G]
L = ":sh wezterm cli split-pane lazygit" # Lazygit
I = ":sh git init"                       # Init
d = ":sh git diff"                       # diff
g = ":sh git log --oneline --graph"      # graph (log)
l = ":sh git log -p"                     # log
s = ":sh git status"                     # status
t = ":sh git tag"                        # tag

[keys.normal."space".u] # function1: reload, sort, preview
"space" = ":reload-all"
#sort
s = ["split_selection_on_newline", ":sort"]  # sort
r = ["split_selection_on_newline", ":rsort"] # reverse sort
#wrap
# w = ":reflow 80"
w = ":reflow"     # reflow
W = ":reflow 120" # reflow 120
#preview
p = ":sh firefox $PWD" # html, markdown preview (shell: pwsh, nu)
# t = ":sh typos || $null" # typos-lsp is configured.(shell: pwsh)
t = ":sh try { typos }" # typos-lsp is configured.(shell: nu)
# TODO: `cspell --words-only --unique "**/*.md" | sort --ignore-case >> project-words.txt || $null`
# TODO: `cspell --no-progress --show-suggestions --show-context "**/*.md" || $null`

[keys.normal."space".t] # function2: theme, time, info
# theme
# issue : [Feature Request] toggle theme theme1 theme2
h = ":theme my_theme_dark"  # theme (dark)
H = ":theme my_theme_light" # theme (light)
# time
# @shell pwsh
# s = ":insert-output Get-Date -Format \"yyyy-MM-dd HH:mm:ss\"" # stamp
# d = ":insert-output Get-Date -Format \"yyyy-MM-dd\""          # date
# t = ":insert-output Get-Date -Format \"HH:mm:ss\""            # time
# @shell nu
# s = ":insert-output date now | format date \"%Y-%m-%d %H:%M:%S\"" # stamp
# d = ":insert-output date now | format date \"%Y-%m-%d\""          # date
# t = ":insert-output date now | format date \"%H:%M:%S\""          # time
# @shell sh
s = ":insert-output date \"+%Y-%m-%d %H:%M:%S\"" # stamp
d = ":insert-output date \"+%Y-%m-%d\""          # date
t = ":insert-output date \"+%H:%M:%S\""          # time

# info
# @shell sh
c = ":insert-output echo \"@Author       CAESIUS-TIM\n@Github       https://github.com/CAESIUS-TIM\n@Date         $(date \"+%Y-%m-%d %H:%M:%S\")\n@LastEditors\n@LastEditTime\n@Description\""
e = ":insert-output echo \"timxing2000@foxmail.com\""
g = ":insert-output echo \"https://github.com/CAESIUS-TIM\""

[keys.normal."space".i]
i = ":toggle file-picker.hidden"     # ignore (hidden)
g = ":toggle file-picker.git-ignore" # git

[keys.normal."space".l] # lang
r = ":sh cargo run"             # run
R = ":sh cargo run --release"   # Run release
b = ":sh cargo build"           # build
B = ":sh cargo build --release" # Build release
# @shell pwsh
# t = { t = ":sh cargo test", i = ":sh cargo test -- --ignored", c = ":sh cargo tarpaulin || $null" }
# @shell nu
t = { t = ":sh cargo test", i = ":sh cargo test -- --ignored", c = ":sh try { cargo tarpaulin }" }
# @wezterm
# r = ":sh wezterm cli split-pane cargo run"
# R = ":sh wezterm cli split-pane cargo run --release"
# b = ":sh cargo build"
# B = ":sh cargo build --release"
# @shell pwsh
# t = { t = ":sh cargo test", i = ":sh cargo test -- --ignored", c = ":sh cargo tarpaulin || $null" }
