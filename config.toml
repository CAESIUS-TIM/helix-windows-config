# # opacity
# ## dark
# - adwaita-dark
# - ayu_dark
# - catppuccin_frappe
# - darcula
# - darcula-solid
# - dark_plus
# - everforest_dark
# - github_dark
# - github_dark_colorblind
# - github_dark_dimmed
# - gruvbox
# - gruvbox_dark_hard
# - gruvbox_dark_soft
# - hex_toxic
# - new_moon
# - nightfox
# - noctis
# - nord
# - nord-night
# - onedark
# - onedarker
# - snazzy (primary selection is very clear)
# - solarized_dark
# - sonokai
# ## light
# no theme is ok... QwQ
# - cyan_light
#
# # not opacity
# ## dark
# - catppuccin_frappe
# - dark_plus
# TODO
# ## light
# - nord_light
# - papercolor-light
# - spacebones_light
#
# # interesting
# - base16_transparent
# - heisenberg
theme = "darcula-solid"
# theme = "snazzy"
# theme = "catppuccin_frappe"
# theme = "dark_plus"

[editor]
# bufferline = "always"
bufferline = "multiple"
color-modes = true
cursorline = true
line-number = "relative"
mouse = false
rulers = [80, 120]
shell = [
  "pwsh.exe",
  "-NoLogo",
  "-NoProfileLoadTime",
  "-Command",
  "$PSStyle.OutputRendering='PlainText';",
]
true-color = true
undercurl = true

[editor.lsp]
display-messages = true
display-inlay-hints = true

[editor.statusline]
left = [
  "mode",
  "selections",
  "spinner",
  # "separator", 
  "version-control",
  # "separator",
  "file-name",
  "file-modification-indicator",
]
center = []
right = [
  "diagnostics",
  "workspace-diagnostics",
  "separator",                # <-
  "selections",
  "primary-selection-length",
  "separator",                # <-
  "position",
  "position-percentage",
  "spacer",                   # <-[]
  "separator",                # <-
  "file-encoding",
  "file-line-ending",
  "file-type",
]
separator = ""

[editor.cursor-shape]
insert = "bar"
normal = "block"
select = "underline"

[editor.file-picker]
hidden = true
git-ignore = true

[editor.whitespace.render]
nbsp = "all"
tab = "all"
newline = "none"

[editor.whitespace.characters]
space = "·"
nbsp = "⍽"
tab = "→"
newline = "⏎"
tabpad = "·"  # Tabs will look like "→···" (depending on tab width)

[editor.indent-guides]
render = true
character = "╎" # Some characters that work well: "▏", "┆", "┊", "⸽"
skip-levels = 1

[editor.soft-wrap]
enable = true

################################################################################
### Key mapping
################################################################################

[keys.insert]
# Maps `jj` to exit insert mode as vim
# j = { j = ["normal_mode", "move_char_left"] } 
j = { j = "normal_mode", k = "normal_mode" }

# shell shortcut 
C-a = "goto_first_nonwhitespace"
C-e = "goto_line_end_newline"
C-f = "move_char_right"
C-b = "move_char_left"

# A-f = ["move_next_word_end"]   # BUG
# A-b = ["move_prev_word_start"] # BUG

# Origin: C-u, C-k, C-h, C-d, C-w, A-d
# C-w is so confusing. Just C-h/A-h, C-d/A-d
A-h = "delete_word_backward"

# "C-;" = [
#   "save_selection",
#   "insert_at_line_end",
#   ":append-output echo ';'",
#   "delete_char_forward",
#   "jump_backward",
# ]
# " " = ["collapse_selection", ":insert-output printf ' '", "move_char_right"]

[keys.normal]
# `A-.`: Repeat last motion (f, t or m)
# `.`: Repeat last insert
d = ["change_selection", "normal_mode"]
ret = ["move_line_down", "goto_first_nonwhitespace"]
# Use this binding too often, will forget to use Alt+Comma to remove primary
# selection. 
# Practice Comma and Semicolon to get skilled in complexed selection mode.
# esc = ["collapse_selection", "keep_primary_selection"]

C-s = ":w"
C-m = "save_selection"
C-q = ":q"

# A-up = [
#   "keep_primary_selection",
#   "extend_line",
#   "yank",
#   "move_line_up",
#   "open_above",
#   "normal_mode",
#   "replace_with_yanked",
#   "move_line_down",
#   "move_line_down",
#   "extend_line",
#   "delete_selection",
#   "move_line_up",
#   "move_line_up",
# ]
# A-down = [
#   "keep_primary_selection",
#   "extend_line",
#   "delete_selection",
#   "paste_after",
#   "move_line_down",
# ]

# F5 = ""
A-x = ["extend_line_up", "extend_to_line_bounds", "select_mode"]

[keys.select]
A-x = ["extend_line_up", "extend_to_line_bounds", "select_mode"]

[keys.normal."space".c] # conifg
o = ":config-open"
l = ":o C:/Users/26523/AppData/Roaming/helix/languages.toml"
r = ":config-reload"
d = ":sh git diff"

[keys.normal."space"."space"] # function
"space" = ":reload-all"

c = ":toggle search.smart-case"
f = [":sh firefox $PWD"]              # html, markdown preview
i = ":toggle lsp.display-inlay-hints"

l = ":toggle cursorline"
L = ":toggle cursorcolumn"

m = ":toggle mouse"
r = ["split_selection_on_newline", ":rsort"]
s = ["split_selection_on_newline", ":sort"]

[keys.normal."space".t] # function
h = ":theme dark_plus"
H = ":theme github_light_tritanopia"

s = ":insert-output Get-Date -Format \"yyyy-MM-dd HH:mm:ss\""
d = ":insert-output Get-Date -Format \"yyyy-MM-dd\""
t = ":insert-output Get-Date -Format \"HH:mm:ss\""
e = ":insert-output echo \"timxing2000@foxmail.com\""

[keys.normal."space".i]
i = [":toggle file-picker.hidden"]
g = [":toggle file-picker.git-ignore"]

[keys.normal."space".l] # lang
r = ":sh cargo run"
b = { u = ":sh cargo build", r = ":sh cargo build --release" }
c = ":sh cargo clippy || $null"
t = { t = ":sh cargo test", i = ":sh cargo test -- --ignored", c = ":sh cargo tarpaulin || $null", y = ":sh typos || $null" }
